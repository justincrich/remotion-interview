{
	// Place your project-mirliton workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"rfac":{
		"scope": "typescriptreact",
		"prefix": "rfac",
		"body": [
			"import React from 'react'",
			"import styled from 'styled-components'",
			"",
			"interface $1Props {",
			"    className?: string",
			"    children: JSX.Element | JSX.Element[]",
			"}",
			"export const $1 = (props: $1Props): JSX.Element => {",
    	"    const { className } = props",
    	"    return (",
      "        <Container className={className}>",
      "            <h1> New Component</h1>",
      "        </Container>",
    	"    )",
			"}",	
			"",
			"const Container = styled.div``",
		]
	},
	"hooksub":{
		"scope": "typescriptreact",
		"prefix": "hooksub",
		"body": [
			"import { useEffect, useState } from 'react'",
			"import { $1 } from './$1'",
			"import { AsyncResult } from './types'",
			"export const useProjectsSubscription = (",
    	"DEPPPPPP: string",
			"): AsyncResult<any> => {",
    	"const client = $1()",
    	"const [isLoading, setLoading] = useState(false)",
    	"const [error, setError] = useState<Error | null>(null)",
    "const [data, setData] = useState<ProjectDetails[] | null>(null)",
    "useEffect(() => {",
        "setLoading(true)",
        "setError(null)",
        "SUBSCRIPTION(",
           " DEPPPPPP,",
            "(projectDetailsList) => {",
                "setError(null)",
                "setLoading(false)",
                "setData(projectDetailsList)",
            "},",
            "(nextError) => {",
                "setError(nextError)",
                "setLoading(false)",
            "}",
        ")",
    "}, [DEPPPPPP, client])",

    "return { data, error, isLoading }",
"}"

		]
	}
}